import 'dart:async';

import 'package:zaviato/app/theme/app_theme.dart';
import 'package:zaviato/app/utils/math_utils.dart';
import 'package:flutter/material.dart';

class ThemeHelper {
  static StreamController<String> controller = StreamController<String>();

  static BaseTheme theme() => _getDefaultTheme();

  static String _appTheme;

  static Stream<String> appthemeString = controller.stream;

  static Map<String, BaseTheme> _supportedThemes = {};

  static BaseTheme _getDefaultTheme() {
    //return default strings if locale is not set

    if (_appTheme == null) return BaseTheme();

    //throw exception to notify given local is not found or not generated by the generator

    if (!_supportedThemes.containsKey(_appTheme))
      throw Exception(
          "$_appTheme is not found.\n Make sure you have added this locale in JSON file\n Try running flutter pub run build_runner");

    //return locale from map

    return _supportedThemes[_appTheme];
  }

  static void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
    controller.add(_newTheme);
  }
}

class BaseTheme {
  Color get colorPrimary => fromHex("#4A89DC");

  Color get colorPrimaryLight => fromHex("#C6EEE7");

  Color get textColor => fromHex("#2F2F51");

  Color get dividerColor => fromHex("#E3E3E3");

  Color get textBlackColor => fromHex("#091423");

  Color get grayColor => fromHex("#AFAFAF");

  Color get whiteColor => Colors.white;

  Color get redColor => fromHex("#F14236");

  Color get shadowColor => fromHex("#0000001A");

  // Color get shadowColor => shadowColorWithoutOpacity.withOpacity(0.1);

  // Color get shadowColor => fromHex("#7D9EF61A");

  TextStyle get white38RegularTextStyle {
    return TextStyle(
      fontSize: getFontSize(38),
      color: whiteColor,
      fontWeight: FontWeight.w400,
    );
  }

  TextStyle get white32BoldTextStyle {
    return TextStyle(
      fontSize: getFontSize(32),
      color: whiteColor,
      fontWeight: FontWeight.w700,
    );
  }

  TextStyle get black22BoldTextStyle {
    return TextStyle(
      fontSize: getFontSize(22),
      color: textBlackColor,
      fontWeight: FontWeight.w700,
    );
  }

  TextStyle get white18RegularTextStyle {
    return TextStyle(
      fontSize: getFontSize(18),
      color: whiteColor,
      fontWeight: FontWeight.w400,
    );
  }
  TextStyle get white22BoldTextStyle {
    return TextStyle(
      fontSize: getFontSize(22),
      color: whiteColor,
      fontWeight: FontWeight.w700,
    );
  }

  TextStyle get buttonTextStyle {
    return TextStyle(
      fontSize: getFontSize(18),
      color: whiteColor,
      fontWeight: FontWeight.w400,
    );
  }

  TextStyle get gray16RegularTextStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      color: grayColor,
      fontWeight: FontWeight.w400,
    );
  }

  TextStyle get colorPrimary14MediumTextStyle {
    return TextStyle(
      fontSize: getFontSize(14),
      color: colorPrimary,
      fontWeight: FontWeight.w500,
    );
  }

  TextStyle get white14RegularTextStyle {
    return TextStyle(
      fontSize: getFontSize(14),
      color: whiteColor,
      fontWeight: FontWeight.w400,
    );
  }

  TextStyle get black14RegularTextStyle {
    return TextStyle(
      fontSize: getFontSize(14),
      color: textBlackColor,
      fontWeight: FontWeight.w400,
    );
  }

  TextStyle get white16BoldTextStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      color: whiteColor,
      fontWeight: FontWeight.w700,
    );
  }

  TextStyle get black14BoldTextStyle {
    return TextStyle(
      fontSize: getFontSize(14),
      color: textBlackColor,
      fontWeight: FontWeight.w700,
    );
  }

  TextStyle get getHintTextCommonTextStyle {
    return TextStyle(
      fontSize: getFontSize(14),
      fontWeight: FontWeight.w400,
      color: grayColor,
    );
  }

  TextStyle get getLabelStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      fontWeight: FontWeight.w400,
      color: textBlackColor,
    );
  }


  TextStyle get errorLabelStyle {
    return TextStyle(
      fontSize: getFontSize(16),
      fontWeight: FontWeight.w400,
      color: redColor,
    );
  }
}

BaseTheme get appTheme => ThemeHelper.theme();
